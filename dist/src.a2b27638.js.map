{"version":3,"sources":["src/Paddle.js","src/input.js","src/index.js"],"names":["Paddle","gameWidth","gameHeight","height","width","position","x","y","ctx","fillStyle","fillRect","deltaTime","InputHandler","document","addEventListener","event","keyCode","alert","canvas","querySelector","getContext","GAME_WIDTH","GAME_HEIGHT","paddle","lastTime","gameLoop","timeStamp","clearRect","update","draw","requestAnimationFrame"],"mappings":";;AEAA;;AACA;;;;AAEA,IAAIkB,MAAM,GAAGL,QAAQ,CAACM,aAAT,CAAuB,aAAvB,CAAb;AAEA,IAAIX,ADLiBI,GCKd,GAAGM,MAAM,CAACE,EDJf,QCIQ,CAAkB,IAAlB,CAAV,UDJgB;ACMhB,ADNgB,ICMVC,UAAU,GAAG,GAAnB;AAEA,IAAMC,WAAW,GAAG,GAApB;AAEA,ADTIT,EAAAA,ECSAU,MAAM,ADTE,CAACT,ECSA,IAAId,UDTb,CAA0B,ICSjB,CAAWqB,IDTpB,EAAqC,ICS5B,EAAuBC,IDTKP,KAAK,ECSjC,ADTqC,CCSlD;AAEA,ADVM,IDHef,AEajBY,QDVUG,KAAK,CCUnB,ADVoBC,OAAd;ADFJ,AEcF,ADXQ,ICWJQ,ODXS,CCWD,CDXJ,ECWO,CAAf,EFdcvB,SAAZ,EAAuBC,UAAvB,EAAmC;AAAA,ACI3Be,QAAAA,KAAK,CAAC,aAAD,CAAL;ACYV,ADXU,SCWDQ,QAAT,CAAkBC,SAAlB,EAA6B;AFfzB,AEgBF,MAAIf,GFhBGR,MAAL,AEgBW,GFhBG,AEgBAuB,EFhBd,OEgBuB,GAAGF,QAA5B;AFfE,AEgBFA,ADZM,ECYNA,OFhBOpB,CEgBC,CDZG,ECYAsB,ADZL,CDJJ,GAAa,GAAb,EEgBF,CAF2B,CAG3B;AFfE,ACGMT,QAAAA,CDHDZ,ICGM,CAAC,GDHZ,GAAgB,QCGL,CAAL;ADFJC,AEeJE,ADZQ,ECYRA,GAAG,CFfCF,AEeAqB,CFfC,EAAE1B,MEeP,CAAc,CAAd,CFfgB,CEeC,CAAjB,CFfmB,CAAZ,AEea,GFfG,AEevB,EAAyB,GFfGG,AEe5B,EAJ2B,CAK3B,EFhBuB,GAAa,CADlB;AAEdG,ACJA,MDIAA,CAAC,EAAEL,UAAU,GAAG,KAAKC,MAAlB,GAA2B;AAFhB,AEkBlBoB,ADZG,ECYHA,CDrBE,EDGA,GEkBI,CAACK,MAAP,CAAcjB,SAAd,EAN2B,CAO3B;AFfC,ACGA;ACaDY,EAAAA,MAAM,CAACM,IAAP,CAAYrB,GAAZ;AAEAsB,EAAAA,qBAAqB,CAACL,QAAD,CAArB;AACD;yBFlBMjB,KAAK;AACRA,MAAAA,GAAG,CAACC,SAAJ,GAAgB,OAAhB;AACAD,MAAAA,GAAG,CAACE,QAAJ,CAAa,KAAKL,QAAL,CAAcC,CAA3B,EAA8B,KAAKD,QAAL,CAAcE,CAA5C,EAA+C,KAAKH,KAApD,EAA2D,KAAKD,MAAhE;AACD;;;2BAEMQ,WAAW;AAChB,UAAI,CAACA,SAAL,EAAgB;AAEhB,WAAKN,QAAL,CAAcC,CAAd,IAAmB,IAAIK,SAAvB;AACD","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["export default class Paddle {\n  constructor(gameWidth, gameHeight) {\n    this.height = 20;\n    this.width = 150;\n\n    this.position = {\n      x: gameWidth / 2 - this.width / 2,\n      y: gameHeight - this.height - 10\n    };\n  }\n  draw(ctx) {\n    ctx.fillStyle = \"green\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n\n  update(deltaTime) {\n    if (!deltaTime) return;\n\n    this.position.x += 5 / deltaTime;\n  }\n}\n","export default class InputHandler {\n  constructor() {\n    document.addEventListener(\"keydown\", event => {\n      switch (event.keyCode) {\n        case 37:\n          alert(\"moving left\");\n          break;\n        case 39:\n          alert(\"moving right\");\n          break;\n      }\n    });\n  }\n}\n","import Paddle from \"/src/Paddle\";\nimport InputHandler from \"/src/input\";\n\nlet canvas = document.querySelector(\"#gameScreen\");\n\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = 800;\n\nconst GAME_HEIGHT = 600;\n\nlet paddle = new Paddle(GAME_WIDTH, GAME_HEIGHT);\n\nnew InputHandler();\n\nlet lastTime = 0;\n\nfunction gameLoop(timeStamp) {\n  let deltaTime = timeStamp - lastTime;\n  lastTime = timeStamp;\n  //clear the canvas screen\n  ctx.clearRect(0, 0, 800, 600);\n  //update paddle position\n  paddle.update(deltaTime);\n  //redraw paddle\n  paddle.draw(ctx);\n\n  requestAnimationFrame(gameLoop);\n}\n"]}